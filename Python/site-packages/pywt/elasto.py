#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Set up ElastoDyn script
#
# Authors: Hao BAI (hao.bai@insa-rouen.fr)
# Date: 29/11/2018
#
# Comments:
#     - 0.0: Initial version
# Description:
# 
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



#!------------------------------------------------------------------------------
#!                                       MODULES
#!------------------------------------------------------------------------------
#*============================= Modules Personnels =============================
from tools import utils
#* ============================= Modules Communs ==============================
import re
import copy
import collections
from pathlib import Path



#!------------------------------------------------------------------------------
#!                                   CLASS DEFINITION
#!------------------------------------------------------------------------------
class InitialCondition(object):
    """ Generate initial conditions in ElastoDyn from results of DLC0.1 under
        uniform wind
    """
    def __init__(self, speedRange):
        self._speedRange = speedRange
        self._outputPath = Path("~/Eolien/Parameters/NREL_5MW_Onshore/Output"
                                "/DLC0.1").expanduser()
        self._initCondFolder = Path("~/Eolien/Parameters/NREL_5MW_Onshore/WT"
                                    "/InitCond").expanduser()
        self._initCondTemplate = self._initCondFolder.joinpath("ElastoDyn_*.dat"
                                                            ).open().readlines()
        self._conditionKeys = ("TipDxc1", "TipDyc1", "PtchPMzc1", "PtchPMzc2",
                               "PtchPMzc3", "Azimuth", "RotSpeed", "NacYaw",
                               "YawBrTDxt", "YawBrTDyt")
        self._allConditions = collections.OrderedDict().fromkeys(
                                                               self._speedRange)
    
    def getConditions(self):
        for v in self._speedRange:
            filename = self._outputPath.joinpath("CST_{}.out".format(v))
            data = utils.readcsv(filename)
            conditions = collections.OrderedDict().fromkeys(self._conditionKeys)
            for key in self._conditionKeys:
                conditions[key] = data.get(key)["Records"][-1]
            self._allConditions[v] = conditions  
    
    def saveToFile(self):
        for v in self._speedRange:
            script = copy.deepcopy(self._initCondTemplate)
            file=self._initCondFolder.joinpath("ElastoDyn_{}mps.dat".format(v))
            # Change values
            script[1] = re.sub("\*", str(v), script[1]) # the title
            for key in self._conditionKeys:
                for (index,line) in enumerate(script):
                    if key in line:
                        script[index] = self._change_number(line, key,
                                                    self._allConditions[v][key])
            # write to disk
            file.open("w").writelines(script)
    
    def _change_number(self, string, keyword, value):
        position = string.find(keyword)
        substring = string[:position]
        new_substring = re.sub("\*", str(value), substring)
        newline = new_substring + string[position:]
        return newline



#!------------------------------------------------------------------------------
#!                                 FUNCTION DEFINITION
#!------------------------------------------------------------------------------
def generate_script(speedRange):
    temp = InitialCondition(speedRange=speedRange)
    temp.getConditions()
    temp.saveToFile()



#!------------------------------------------------------------------------------
#!                                    MAIN FUNCTION
#!------------------------------------------------------------------------------
@utils.timer
def main():
    toTest = 1
    
    if toTest == 1:
        windSpeedRange = utils.frange(3.0, 3.3, 0.1)
        test = InitialCondition(windSpeedRange)
        test.getConditions()
        test.saveToFile()
        pass



#!------------------------------------------------------------------------------
#!                                     RUNNING TEST
#!------------------------------------------------------------------------------
if __name__ == '__main__':
        main()
