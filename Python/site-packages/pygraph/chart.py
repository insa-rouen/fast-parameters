#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Matplotlib post-processing configuration
#
#
# Authors: Hao BAI
# Date: 18/11/2018
#
# Version:
#   - 0.0: Initial version
#
# Comments:
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



#!------------------------------------------------------------------------------
#!                                          MODULES PRÉREQUIS
#!------------------------------------------------------------------------------
#*============================== Modules Personnels ============================

#*============================== Modules Communs ==============================
import numpy
from matplotlib import pyplot as plt
from matplotlib import ticker


#!------------------------------------------------------------------------------
#!                                         CLASS
#!------------------------------------------------------------------------------



#!------------------------------------------------------------------------------
#!                                      FUNCTIONS
#!------------------------------------------------------------------------------
def draw(figure, toPDF, *args, **kwargs):
    """ Set figure arrangement
    """
    if kwargs is None:
        left, bottom, right, top, wspace, hspace = 0.06, 0.06, 0.94, 0.94, 0.14, 0.14
    else:
        left, bottom, right, top, wspace, hspace = kwargs.get('left'), kwargs.get('bottom'), kwargs.get('right'), kwargs.get('top'), kwargs.get('wspace'), kwargs.get('hspace')
    figure.set_size_inches(16, 9)
    plt.subplots_adjust(left=left, bottom=bottom, right=right, top=top,
                        wspace=wspace, hspace=hspace)
    
    if toPDF != [] and toPDF[0]:
        # export figure to pdf file
        if '.pdf' not in toPDF[1]:
            filename = toPDF[1] + '.pdf'
        else:
            filename = toPDF[1]
        plt.savefig(filename)
    else:
        # show figure on screen
        # plt.tight_layout()
        plt.show()
    plt.close()


def adjust(axis, title="", loc=0, minor=[True, False, False, False], xlim=[],
           ylim=[], xlabel="Time (s)", ylabel="", xVisible=True, yVisible=True,
           seperator=True):
    """ Adjust axis properties
    """
    axis.set_title(title)
    if isinstance(loc, int): axis.legend(loc=loc)

    if minor[0]: # X ticks minorlocator
        axis.xaxis.set_minor_locator(ticker.AutoMinorLocator())
        if minor[1]: # X minor axis
            axis.grid(which='minor', axis='x', color='tab:gray', linestyle=':')
    if minor[2]: # Y ticks minorlocator
        axis.yaxis.set_minor_locator(ticker.AutoMinorLocator())
        if minor[3]: # Y minor axis
            axis.grid(which='minor', axis='y', color='tab:gray', linestyle=':')
    axis.grid(which='major')

    if xlim != []:
        if len(xlim) == 2:
            axis.set_xlim(xlim[0], xlim[1])
        if len(xlim) == 3:
            axis.set_xlim(xlim[0], xlim[1])
            axis.set_xticks(numpy.arange(xlim[0], xlim[1]+xlim[2], xlim[2]))
    if ylim != []:
        if len(ylim) == 2:
            axis.set_ylim(ylim[0], ylim[1])
        if len(ylim) == 3:
            axis.set_ylim(ylim[0], ylim[1])
            axis.set_yticks(numpy.arange(ylim[0], ylim[1]+ylim[2], ylim[2]))

    axis.set_xlabel(xlabel)
    axis.set_ylabel(ylabel)

    if not xVisible: plt.setp(axis.get_xticklabels(), visible=False)
    if not yVisible: plt.setp(axis.get_yticklabels(), visible=False)

    # use " " as thousand seperator
    if seperator:
        axis.yaxis.set_major_formatter(
                ticker.FuncFormatter(lambda x,pos: format(int(x), ",").replace(",", " ")))

def autolabel(axis, rects, xpos='center', fontSize='medium'):
    """
    Attach a text label above each bar in *rects*, displaying its height.
    INPUT
        rects: an object of matplotlib.axes.Axes.bar
        xpos: indicates which side to place the text w.r.t. the center of
    the bar. It can be one of the following {'center', 'right', 'left'}.
    """

    xpos = xpos.lower()  # normalize the case of the parameter
    ha = {'center': 'center', 'right': 'left', 'left': 'right'}
    offset = {'center': 0.5, 'right': 0.57, 'left': 0.43}  # x_txt = x + w*off

    for rect in rects:
        height = rect.get_height()
        if height != 0:
            axis.text(rect.get_x() + rect.get_width()*offset[xpos], 1.002*height,
                      '{}'.format(height), ha=ha[xpos], va='bottom', size=fontSize)

#!------------------------------------------------------------------------------
#!                                     MAIN FUNCTION
#!------------------------------------------------------------------------------
def main():
    pass



#!------------------------------------------------------------------------------
#!                                         EXÉCUTION
#!------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
