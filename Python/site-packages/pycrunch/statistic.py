#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# A useful statistic toolbox
#
#
# Authors: Hao BAI
# Date: 24/01/2019
#
# Version:
#   - 0.0: Fit the continuous data by several distributions
#
# Comments:
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#!------------------------------------------------------------------------------
#!                                       MODULES
#!------------------------------------------------------------------------------
#*============================== Modules Personnels ============================
# from tools import utils
# from pygraph import chart
#*============================== Modules Communs ==============================
from matplotlib import pyplot as plt
# from matplotlib.ticker import PercentFormatter
# from scipy import stats as scistats
# from pathlib import Path
# import matplotlib.mlab as mlab
# import scipy
import scipy.stats
import json
# from scipy.stats._continuous_distns import _distn_names as DIST_NAMES
# import math
import numpy as np
# import collections
# import statistics as pystats


#!------------------------------------------------------------------------------
#!                                   CLASS DEFINITION
#!------------------------------------------------------------------------------
class Damage(object):
    """ Find extrema in FAST output file
        Attributes:
                      
        Methods:
        
    """
    def __init__(self, filebase, echo):
        pass

class Analysis(object):
    """ Cross wind speed study
    """
    def __init__(self, seeds, folder, echo):
        pass

    #!    vvvvvvvvvvvvvvvvvvvvvvvvv Pre-processing vvvvvvvvvvvvvvvvvvvvvvvvv
    def run(self):
        print('Post-processing: Analysis of fatigue damage v0.2 (25 November 2018)')
        print('|- Loading file ...')
        self._load()
        print('|- Calculating damage on spot for all wind speeds ...')
        self._damageOnSpot()
        print('|- Calculating mean damage for all wind speeds ...')
        self._meanDamageForAllSpeeds()

    def _load(self):
        pass



#!------------------------------------------------------------------------------
#!                                 FUNCTION DEFINITION
#!------------------------------------------------------------------------------
def fit(sample, distribution_name):
    """ Return Maximum Likelihood Estimate (MLE) for distribution parameters
        INPUT
            sample: observations to be fitted [array_like]
            distribution_name: name of a continuous distribution [string]
        OUTPUT
            param: shape parameters (if applicable), followed by location
                   and scale parameters [tuple of floats]
    """
    dist = getattr(scipy.stats, distribution_name)
    param = dist.fit(sample)
    return param

def bestfit(sample, alpha=0.05, plotCDF=False, echo=True):
    """ Find the best fit distribution by using Kolmogorovâ€“Smirnov test
        alpha: statistical significance (a percentile used to reject the null 
               hypothesis) [float]
    """
    DIST_NAMES = ("norm", "anglit", "bradford", "cauchy", "chi", "chi2",
                  "cosine", "dgamma", "dweibull", "expon", "exponnorm",
                  "exponweib", "exponpow", "fatiguelife", "foldnorm",
                  "weibull_min", "weibull_max", "frechet_r", "frechet_l", 
                  "genlogistic", "genexpon", "genextreme", "gamma", "gengamma", 
                  "genhalflogistic", "gompertz", "gumbel_r", "gumbel_l", 
                  "halflogistic", "halfnorm", "hypsecant", "invgauss", 
                  "johnsonsb", "johnsonsu", "laplace", "logistic", "lognorm", 
                  "gilbrat", "maxwell", "kappa4", "kappa3", "moyal", "ncx2", 
                  "t", "pearson3", "powerlaw", "powerlognorm", "powernorm", 
                  "rdist", "rayleigh", "reciprocal", "rice", "recipinvgauss", 
                  "semicircular", "skewnorm", "trapz", "triang", "truncexpon", 
                  "uniform", "vonmises", "vonmises_line", "wald", "gennorm", 
                  "halfgennorm", )
    if echo:
        print("Fitting {} observations ...".format(len(sample)))
    # find valid distributions
    dist_valid = []
    for (ind, dist_name) in enumerate(DIST_NAMES):
        dist = getattr(scipy.stats, dist_name)
        param = dist.fit(sample)
        res = scipy.stats.kstest(sample, dist_name, args=param)
        if res[1] >= alpha:
            dist_valid.append([dist_name, dist, param, res[0], res[1]])
            if echo:
                print("|- {} : D = {}, p-value = {}".format(dist_name, res[0],
                      res[1]))
    if dist_valid == []:
        raise Exception("[ERROR] Can't find any distribution to fit the "
                        "observations !")
    else:
        dist_valid.sort(key=lambda x: x[-2])
    # plot CDF of all valid distributions
    if plotCDF:
        fig, axis = plt.subplots()
        axis.hist(sample, bins=len(sample), histtype="stepfilled", cumulative=True, 
                density=True, alpha=0.6)  # ECDF
        # axis.hist(sample, bins=int((len(sample))/2), histtype="step",
        #           density=True)
        # plt.show()
        x = np.linspace(min(sample), max(sample), num=len(sample))
        for (dist_name, dist, param, D, p) in dist_valid:
            cdf = dist.cdf(x, *param[:-2], loc=param[-2], scale=param[-1])
            axis.plot(x, cdf, label="{}: D={:.3f}, p-value={:.3f}".format(dist_name,
                    D, p))
        #     pdf = dist.pdf(x, *param[:-2], loc=param[-2], scale=param[-1]) * 1000
        #     axis.plot(x, pdf)
        axis.legend()
        plt.show()
    return dist_valid[0]

#!------------------------------------------------------------------------------
#!                                    MAIN FUNCTION
#!------------------------------------------------------------------------------
def main():
    with open("data.json") as f:
        sample = json.loads(f.read())

    param = fit(sample, "lognorm")
    bestfit(sample, plotCDF=True)



#!------------------------------------------------------------------------------
#!                                     RUNNING TEST
#!------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
