#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# A useful statistic toolbox
#
#
# Authors: Hao BAI
# Date: 24/01/2019
#
# Version:
#   - 0.0: Fit the continuous data by several distributions
#
# Comments:
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


#!------------------------------------------------------------------------------
#!                                       MODULES
#!------------------------------------------------------------------------------
#*============================== Modules Personnels ============================
# from tools import utils
# from pygraph import chart
#*============================== Modules Communs ==============================
from matplotlib import pyplot as plt
# from matplotlib.ticker import PercentFormatter
# from scipy import stats as scistats
# from pathlib import Path
# import matplotlib.mlab as mlab
# import scipy
import scipy.stats
import json
# from scipy.stats._continuous_distns import _distn_names as DIST_NAMES
# import math
import numpy as np
# import collections
# import statistics as pystats


#!------------------------------------------------------------------------------
#!                                   CLASS DEFINITION
#!------------------------------------------------------------------------------
class Damage(object):
    """ Find extrema in FAST output file
        Attributes:
                      
        Methods:
        
    """
    def __init__(self, filebase, echo):
        pass

class Analysis(object):
    """ Cross wind speed study
    """
    def __init__(self, seeds, folder, echo):
        pass

    #!    vvvvvvvvvvvvvvvvvvvvvvvvv Pre-processing vvvvvvvvvvvvvvvvvvvvvvvvv
    def run(self):
        print('Post-processing: Analysis of fatigue damage v0.2 (25 November 2018)')
        print('|- Loading file ...')
        self._load()
        print('|- Calculating damage on spot for all wind speeds ...')
        self._damageOnSpot()
        print('|- Calculating mean damage for all wind speeds ...')
        self._meanDamageForAllSpeeds()

    def _load(self):
        pass



#!------------------------------------------------------------------------------
#!                                 FUNCTION DEFINITION
#!------------------------------------------------------------------------------
def fit(sample, distribution_name):
    """ Return Maximum Likelihood Estimate (MLE) for distribution parameters
        INPUT
            sample: observations to be fitted [array_like]
            distribution_name: name of a continuous distribution [string]
        OUTPUT
            param: shape parameters (if applicable), followed by location
                   and scale parameters [tuple of floats]
    """
    dist = getattr(scipy.stats, distribution_name)
    param = dist.fit(sample)
    return param

def bestfit(sample):
    DIST_NAMES = ("chi", "chi2", "gamma", "lognorm", "maxwell",
                  "ncx2", "norm", "powernorm", "rayleigh", "rdist", "t")
    fig, axis = plt.subplots()
    axis.hist(sample, bins=len(sample), histtype="step", cumulative=True, density=True)  # ECDF
    x = np.linspace(min(sample), max(sample), num=len(sample))
    for dist_name in DIST_NAMES:
        dist = getattr(scipy.stats, dist_name)
        param = dist.fit(sample)
        cdf = dist.cdf(x, *param[:-2], loc=param[-2], scale=param[-1])
        axis.plot(x, cdf, "--", alpha=0.6, label=dist_name)
        print(dist_name, param)
    axis.legend()
    plt.show()

#!------------------------------------------------------------------------------
#!                                    MAIN FUNCTION
#!------------------------------------------------------------------------------
def main():
    with open("data.json") as f:
        sample = json.loads(f.read())

    param = fit(sample, "lognorm")
    bestfit(sample)



#!------------------------------------------------------------------------------
#!                                     RUNNING TEST
#!------------------------------------------------------------------------------
if __name__ == '__main__':
    main()
