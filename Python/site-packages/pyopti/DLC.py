#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# DLC: Redifine pyfast.DLC class to enable more features
#
# Authors: Hao BAI (hao.bai@insa-rouen.fr)
# Version: 0.0
# Date: 07/12/2018
#
# Comments:
#     - 0.0: Initiate from pyfast.DLC
#
# Description:
#     Customize DLC classes for optimization study
#
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



#!------------------------------------------------------------------------------
#!                                   MODULES
#!------------------------------------------------------------------------------
#*         ==================== Modules Personnels ====================
try:
    import sys, IPython # to colorize traceback errors in terminal
    sys.excepthook = IPython.core.ultratb.ColorTB()
except:
    pass
from tools import utils
from pyfast import DLC
#*           ==================== Modules Communs ====================
import re
import os
import json
import time
import platform
import fileinput # iterate over lines from multiple input files
import shutil # high-level file operations
import subprocess # call a bash command e.g. 'ls'
import multiprocessing # enable multiprocessing
from pathlib import Path


#!------------------------------------------------------------------------------
#!                                   GLOBAL VARIABLE
#!------------------------------------------------------------------------------
CORES = os.cpu_count()



#!------------------------------------------------------------------------------
#!                                   CLASS DEFINITION
#!------------------------------------------------------------------------------
class TRD(DLC.DLC23):
    """ TRD
        ATTRIBUTES
            time: gridloss time [float]
    """
    def __init__(self, mode1, gridloss, case, outputFolder='',
                 echo=False):
        super(TRD, self).__init__(gridloss, case, outputFolder, echo)
        self.mode1 = mode1
        self.__id = "".join(map(str, self.mode1))
        self.servoFile = "ServoDyn_DLC2.3TRD.dat"
        self.servoTRDFile = "ServoDyn_TRD.dat"
        self.outputFilename = ""
        self._tmpPath = None

    @property
    def tmpPath(self):
        return self._tmpPath

    @tmpPath.setter
    def tmpPath(self, value):
        self._tmpPath = Path(value).expanduser()
        # Create tmp directory
        self._tmpPath.mkdir(exist_ok=True)
        # Create link to wind profile folder
        link = self._tmpPath.joinpath("Wind").expanduser()
        if not link.exists():
            target = Path('~/Eolien/Parameters/NREL_5MW_Onshore/Wind'
                        ).expanduser()
            link.symlink_to(target, target_is_directory=True)
        # Copy WT folder
        link = self._tmpPath.joinpath("WT").expanduser()
        if not link.exists():
            target = Path('~/Eolien/Parameters/NREL_5MW_Onshore/WT'
                          ).expanduser()
            link.symlink_to(target, target_is_directory=True)
        # destination = self._tmpPath.joinpath("WT").expanduser()
        # if not destination.exists():
        #     source = Path('~/Eolien/Parameters/NREL_5MW_Onshore/WT').expanduser()
        #     utils.cp(source, destination)        

    def run(self, silence=False):
        self._change_TRD()
        super()._fast(silence)
        self._move()

    def _change_TRD(self):
        # ServoDyn_TRD.dat -----------------------------------------------------
        filename = self.wtPath.joinpath(self.servoTRDFile)
        with open(filename, 'r') as f:
            data = f.readlines()
            for index, line in enumerate(data):
                if 'TRD_K(1)' in line:
                    data[index] = self._change_number(line, 'TRD_K(1)',
                                                    self.mode1[0])
                if 'TRD_K(2)' in line:
                    data[index] = self._change_number(line, 'TRD_K(2)',
                                                    self.mode1[1])
                if 'TRD_L(1)' in line:
                    data[index] = self._change_number(line, 'TRD_L(1)',
                                                    self.mode1[2])
                if 'TRD_L(2)' in line:
                    data[index] = self._change_number(line, 'TRD_L(2)',
                                                    self.mode1[3])
        filename = self.tmpPath.joinpath('ServoDyn_TRD_{}.dat'
                                        .format(self.__id))
        filename.open('w').writelines(data)
        self.servoTRDFile = filename # update ServoDyn_TRD .dat file


        # ServoDyn input script ------------------------------------------------
        filename = self.wtPath.joinpath(self.servoFile)
        with open(filename) as f:
            data = f.readlines()
            for index, line in enumerate(data):
                if len(self.gridloss) == 3:
                    if "TimGenOf" in line: # Rotor shutdown time
                        data[index] = self._change_number(line, "TimGenOf",
                                                        float(self.gridloss[2]))
                    elif "TPitManS" in line: # Pitch-to-Feather start time
                        data[index] = self._change_number(line, "TPitManS",
                                                    float(self.gridloss[2])+0.2)
                    elif "THSSBrDp" in line: # High-Speed-Shaft start time
                        data[index] = self._change_number(line, "THSSBrDp",
                                              float(self.gridloss[2])+0.2+11.25)
                if 'NTRDfile' in line:
                    data[index] = self._change_string(line, "NTRDfile",
                                                      self.servoTRDFile.name)
                if "DLL_FileName" in line:
                    data[index] = self._change_string(line, "DLL_FileName")
        filename = self.tmpPath.joinpath('ServoDyn_DLC2.3TRD_{}.dat'
                                        .format(self.__id))
        filename.open('w').writelines(data)
        self.servoFile = filename # update ServoDyn .dat file


        # FAST input script ----------------------------------------------------
        filename = self.workPath.joinpath(self.fastFile)
        data = filename.read_text()
        data = self._change_string(data, 'ServoFile')
        
        filename = self.tmpPath.joinpath('{}_{}_{}_{}.fst'.format(self.case,
                                 self.gridloss[0], self.gridloss[1], self.__id))
        filename.write_text(data)
        self.fastFile = filename # update .fst file

        # InflowWind input script ----------------------------------------------
        filename = 'DLC2.3_{}_{}.IW.dat'.format(self.gridloss[0],
            self.gridloss[1])
        source = self.workPath.joinpath(filename)
        destination = self.tmpPath.joinpath(filename)
        utils.cp(source, destination)

    def _change_string(self, text, keyword, new=""):
        if keyword == 'ServoFile':
            old = "WT/ServoDyn_{}TRD.dat".format(self.case)
            new = "{}".format(self.servoFile.name)

        if keyword == 'NTRDfile':
            old = "ServoDyn_TRD.dat"
        
        if keyword == "DLL_FileName":
            old = "DISCON_dar64.so"
            new = "WT/DISCON_dar64.so"
        return re.sub(old, new, text)

    def _move(self):
        """ Move and rename files
        """
        # FAST output file (.out) to output folder -----------------------------
        source = self.tmpPath.joinpath('{}_{}_{}_{}.out'.format(self.case,
                                 self.gridloss[0], self.gridloss[1], self.__id))
        self.outputFilename = '{}_{}_{}.out'.format(self.gridloss[0],
                                                    self.gridloss[1], self.__id)
        destination = self.outputPath.joinpath(self.outputFilename)
        source.replace(destination)


#!------------------------------------------------------------------------------
#!                                 FUNCTION DEFINITION
#!------------------------------------------------------------------------------
def get_TRD(mode1, gridloss, case='DLC2.3', outputFolder='', silence=False,
            echo=False):
    pass



#!------------------------------------------------------------------------------
#!                                    MAIN FUNCTION
#!------------------------------------------------------------------------------
@utils.timer
def main():
    # Load seeds
    with utils.cd('~/Eolien/Parameters/NREL_5MW_Onshore/Wind'):
        with open('6seeds.json', 'r') as f:
            seeds = json.loads(f.read())

    liste = []
    [liste.append(s) for s in seeds if s[0] == "NTM"]
    seeds = liste[:1]

    # ----- Running on single processor
    # get_DLC11(seeds[0])
    # get_DLC11(['NTM','13','-1491944232'], silence=False)
    # get_DLC23(['EOG', 'R', '77.7'])
    get_TRD([290, 30, -90, -20], ['EOG', 'R', '77.7'], outputFolder='opti')

    # Test a case that will produce error during FAST calculation
    get_DLC11(['NTM','3','1480621087'], silence=1)

    # ----- Running on multi processor
    # get_DLC23_multiprocess([['EOG', 'R', '77.6'], ['EOG', 'R', '77.8']], silence=1)



#!------------------------------------------------------------------------------
#!                                     RUNNING TEST
#!------------------------------------------------------------------------------
if __name__ == '__main__':
        main()
