#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Send the result through Gmail
# 
#
# Authors: Hao BAI (yoursbh@gmail.com)
# Version: 0.0
# Date: 28/10/2018
#
# Comments:
#     - 0.0: initial version
#     - 1.3: change message type from Plein Text to HTML (retrieve from eCentime/gmail.py)
#     - 2.0: adapt to new format used for sending mail
# Description:
# The present module has 0 classes.
#   
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



#!------------------------------------------------------------------------------
#!                                        MODULES
#!------------------------------------------------------------------------------
#*============================== Modules Communs ==============================
import time
import re
import base64
import platform
from pathlib import Path
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
from httplib2 import Http
from apiclient.discovery import build # for Gmail
from oauth2client import file, client, tools # for Gmail
#*============================== Modules Personnels ============================
from tools import utils



#!------------------------------------------------------------------------------
#!                                    CLASS DEFINITION
#!------------------------------------------------------------------------------



#!------------------------------------------------------------------------------
#!                                  FUNCTION DEFINITION
#!------------------------------------------------------------------------------
def send(data, by='gmail', language='zh-cn', debug=False):
    subject = data.get("subject",
        "Dear {}, mission completed !".format(data.get("name")))
    attachment = data.get("attachment")
    list_of_files = data.get("list_of_files")
    
    #*============================= Message corps =============================
    content = """\
        <html>
        <head>
            <style>.divcss5{text-indent:2em}</style>
        </head>
            <body wsmode="compose" bgcolor="#FFFFFF" text="#000000">
            Dear USER_NICKNAME,
            <br>
            Your mission is finished on SERVER_NAME.
            <br>
                MESSAGE
            <br>
            Please download the following attachments:
            <br>
                LIST_OF_FILES
            <br>
            <i>PS: PS_PHRASE</i>
            <br>
            [Server Time] CHECK_TIME
            <br>
            --
            <br>
            Copyright Â© 2018-2020 Hao BAI
            </body>
        </html>
        """

    #========================== Message component ==========================
    content = re.sub("USER_NICKNAME", data.get("name", ""), content)
    content = re.sub("SERVER_NAME", platform.node(), content)
    message = data.get("message", "(Null)").replace("\n", "<br>")
    content = re.sub("MESSAGE", message, content)
    ts = time.strftime("(%Z%z) %Y-%m-%d %H:%M:%S", time.localtime())
    content = re.sub("CHECK_TIME", ts, content)
    body = ""
    if list_of_files is not None:
        for i, filename in enumerate(list_of_files):
            text = "<p style='text-indent: 2em;'> - File NO : FILENAME</p>"
            text = re.sub('NO', str(i), text)
            text = re.sub('FILENAME', filename, text)
            body = body + text
    content = re.sub('LIST_OF_FILES', body, content)
    if debug == True:
        print(content)

    #========================== Message container ==========================
    messageRoot = MIMEMultipart()
    receiver = data.get("address")
    messageRoot['Subject'] = subject  # Header(subject, 'utf-8')
    # Add the attachment if it exists
    if (not attachment is None) and isinstance(attachment, (str, Path)):
        attachment = Path(attachment)
        if attachment.stat().st_size >= 20*10**6:  # 20 megabytes
            phrase = "The volume size of attachment is too large".format(
                attachment.absolute())
            content = re.sub("PS_PHRASE", phrase, content)
        else:
            content = re.sub("<i>PS:PS_PHRASE</i>", "", content)
            p = MIMEBase('application', 'octet-stream')
            with attachment.open("rb") as target:
                p.set_payload(target.read())
            encoders.encode_base64(p)  # encode into base64
            p.add_header("Content-Disposition",
                         "attachment; filename={}".format(attachment.name))
            messageRoot.attach(p)
    messageRoot.attach(MIMEText(content, _subtype='html', _charset='utf-8'))
    # Convert to base64url based strings
    messageBase64 = base64.urlsafe_b64encode(
        messageRoot.as_string().encode()).decode()
    messageRaw = {'raw': messageBase64}  # Adapte to Google API requirement
    if debug == True:
        return

    #*============================== Sending mail ==============================
    # Method 2: via Gmail API and OAuth2
    if by.lower() == 'gmail':
        from apiclient.discovery import build
        from httplib2 import Http
        from oauth2client import file, client, tools
        sender = 'eupay.fr@gmail.com'
        messageRoot['From'] = sender

        scopes = 'https://mail.google.com/'
        P1 = Path("~/Codes/changwu/data/gmail_credentials.json").expanduser()
        P2 = Path("~/Codes/changwu/data/gmail_secret.json").expanduser()
        store = file.Storage(str(P1))
        creds = store.get()
        if not creds or creds.invalid:
            flow = client.flow_from_clientsecrets(str(P2), scopes)
            creds = tools.run_flow(flow, store)
        service = build('gmail', 'v1', http=creds.authorize(Http()))
        try:
            message = (service.users().messages().send(userId='me',
                body=messageRaw).execute())
        except:
            ts = time.strftime("(%Z%z) %Y-%m-%d %H:%M:%S", time.localtime())
            print("|- [ERROR] Sending email failed at {} ! (Message ID is {})"
                    .format(ts, message['id']))
            raise
        else:
            ts = time.strftime("(%Z%z) %Y-%m-%d %H:%M:%S", time.localtime())
            print("|- [OK] Mail sent at {} ! (Message ID is {})".format(
                ts, message['id']))



#!------------------------------------------------------------------------------
#!                                     MAIN FUNCTION
#!------------------------------------------------------------------------------
def main():
    pass



#!------------------------------------------------------------------------------
#!                                      RUNNING TEST
#!------------------------------------------------------------------------------
if __name__ == '__main__':
        main()
