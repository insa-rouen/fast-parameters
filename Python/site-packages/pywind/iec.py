#!/usr/bin/env python
# -*- coding: utf-8 -*-

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Create IEC wind profile
#
# Authors: Hao BAI (hao.bai@insa-rouen.fr)
# Date: 27/11/2018
#
# Comments:
#     - 0.0: Initial version
# Description:
# 
# 
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



#!------------------------------------------------------------------------------
#!                                       MODULES
#!------------------------------------------------------------------------------
#*============================= Modules Personnels =============================
from tools import utils
#* ============================= Modules Communs ==============================
import re
import platform
import subprocess
from pathlib import Path


#!------------------------------------------------------------------------------
#!                                   CLASS DEFINITION
#!------------------------------------------------------------------------------
class Uniform(object):
    """ Uniform wind
    """
    def __init__(self, speedRange):
        self._speedRange = speedRange
        self._windPath = Path("~/Eolien/Parameters/NREL_5MW_Onshore/Wind/DLC0.1").expanduser()
        self._template = Path("~/Eolien/Parameters/NREL_5MW_Onshore/Wind/Default/CST_*.wnd").expanduser()
        self._content = self._template.read_text()

    def run(self):
        for v in self._speedRange:
            content = re.sub("\*", str(v), self._content)
            windFile = self._windPath.joinpath("CST_{}mps.wnd".format(v))
            windFile.write_text(content)


class IEC(object):
    def __init__(self, case):
        self.case = case
        # attributes
        self._system = {'Linux':'IECWind_glin64', 'Darwin':'IECWind_gdar64'}
        self._iecwindName = self._system.get(platform.system())
        self._windPath = Path("~/Eolien/Parameters/Python/{0}/Wind/{0}".format(
                              self.case)).expanduser()
        self._windFile = self._windPath.joinpath("IEC.IPT")
        self._windScript = self._windFile.open("r").readlines()
        self._logPath = Path("~/Eolien/Parameters/Python/{}/log".format(self.case)).expanduser()

    @property
    def windspeed(self):
        return self._windScript[12:14]
    
    @windspeed.setter
    def windspeed(self, speed):
        if isinstance(speed, dict) and len(speed) != 0:
            if speed.get("cutin") is not None: 
                self._windScript[12] = "{}     Cut-in wind speed, m/s\n".format(speed.get("cutin"))
            if speed.get("rated") is not None: 
                self._windScript[13] = "{}     Rated wind speed, m/s\n".format(speed.get("rated"))
                self._rated = speed.get("rated")
            if speed.get("cutout") is not None:
                self._windScript[14] = "{}     Cut-out wind speed, m/s\n".format(speed.get("cutout"))

    @property
    def condition(self):
        return self._windScript[16:]
    
    @condition.setter
    def condition(self, list_conditions):
        """ Set wind conditions to be generated
            INPUT:
                list_conditions: list of conditions [list]
            ATTENTION:
                Wind condition should be named as "EOG?+?.?" where:
                    - the 1st ?: "I , "R" or "O"
                    - the 2nd ?: value between 0-9
                    - the 3rd ?: value between 0-9
        """
        self._list_conditions = list_conditions
        self._windScript = self._windScript[:16]
        for (index,cond) in enumerate(list_conditions):
            self._windScript.append(cond+"\n")

    def run(self, silence=False):
        self.save()
        self._iecwind(silence)

    def save(self):
        self._windFile.open("w").writelines(self._windScript)

    def rename(self):
        """ Rename filename by the wind speed
        """
        for filename in self._list_conditions:
            source = self._windPath.joinpath(filename+".wnd")
            newname = self._rated + float(filename[5:])
            destination = self._windPath.joinpath("{}.wnd".format(newname))
            source.replace(destination)

    def _iecwind(self, silence):
        """ Call IECWind program
        """
        command = "{} IEC.IPT".format(self._iecwindName)
        try:
            with utils.cd(str(self._windPath)):
                if silence:
                    output = subprocess.check_output([command], shell=True)
                else:
                    output = subprocess.call([command], shell=True)
        except Exception as e:
            raise e #TODO IECWind don't handle errors !
        else:
            wrong = False



#!------------------------------------------------------------------------------
#!                                 FUNCTION DEFINITION
#!------------------------------------------------------------------------------
def get_DLC23(cutin=None, rated=None, cutout=None, condition=None, silence=False, rename=False):
    temp = IEC("DLC2.3")
    # Change wind turbine nominated speed
    speed = {}
    if cutin is not None: speed["cutin"] = cutin
    if rated is not None: speed["rated"] = rated
    if cutout is not None: speed["cutout"] = cutout
    if speed != {}: temp.windspeed = speed
    # Change wind conditions
    if condition is not None: temp.condition = condition
    # Generate wind profiles
    temp.run(silence)
    if rename: temp.rename()

def get_uniform(speedRange):
    temp = Uniform(speedRange=speedRange)
    temp.run()



#!------------------------------------------------------------------------------
#!                                    MAIN FUNCTION
#!------------------------------------------------------------------------------
@utils.timer
def main():
    toTest = 2

    if toTest == 1:
        test = IEC("DLC2.3")
        test.windspeed = {"cutin":2.9, "rated":24.0}
        # test.windspeed = [1,2,3]
        test.condition = ["EOGR+0.1", "EOGR+0.2", "EOGR+0.3"]
        test.run()
        test.rename()

    if toTest == 2:
        test = Uniform([1.0, 2.0])



#!------------------------------------------------------------------------------
#!                                     RUNNING TEST
#!------------------------------------------------------------------------------
if __name__ == '__main__':
        main()
